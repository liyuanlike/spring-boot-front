package com.github.service;import com.alibaba.fastjson.JSONObject;import com.github.mapper.AreaMapper;import com.github.model.Area;import org.apache.commons.io.FileUtils;import org.springframework.core.io.ClassPathResource;import org.springframework.core.io.Resource;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.Assert;import org.springframework.util.StringUtils;import javax.annotation.PostConstruct;import java.io.File;import java.io.IOException;import java.nio.charset.StandardCharsets;import java.util.List;import java.util.Map;@Servicepublic class AreaService {	private static JSONObject areaJsonObject = null;	@javax.annotation.Resource private AreaMapper areaMapper;	@PostConstruct	public void postConstruct() throws IOException {		Resource resource = new ClassPathResource("area_data.json");		File areaData = resource.getFile();		areaJsonObject = JSONObject.parseObject(FileUtils.readFileToString(areaData, StandardCharsets.UTF_8));		Assert.notNull(areaJsonObject, "area data should be initial.");	}	private void add(Integer code, String name) {		this.areaMapper.add(code, name);	}	@Transactional	public void initDatabase() {		for (Map.Entry<String, Object> entry : areaJsonObject.entrySet()) {			Integer code = Integer.parseInt(entry.getKey());			String name = (String) entry.getValue();			this.add(code, name);		}	}	public List<Map<Integer, String>> search(String name) {		Assert.state(!StringUtils.isEmpty(name), "illegal parameter.");		return this.areaMapper.search(name);	}	    public Area get(Integer code){		Assert.state(code > 100000, "illegal parameter.");	    String name = areaJsonObject.getString(code.toString());	    String province = null;	    String city = null;	    String town = null;        Integer provinceInteger = (code / 10000) * 10000;	    Integer cityInteger = (code / 100) * 100;        if (code.equals(provinceInteger)) {	        province = areaJsonObject.getString(provinceInteger.toString());        } else if (code.equals(cityInteger)) {	        province = areaJsonObject.getString(provinceInteger.toString());	        city = areaJsonObject.getString(cityInteger.toString());        } else {	        province = areaJsonObject.getString(provinceInteger.toString());	        city = areaJsonObject.getString(cityInteger.toString());	        town = areaJsonObject.getString(code.toString());        }        return new Area(code, name, province, city, town);    }}