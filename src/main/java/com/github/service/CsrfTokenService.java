package com.github.service;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.cache.Cache;import org.springframework.cache.CacheManager;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import javax.annotation.Resource;import java.util.UUID;@Servicepublic class CsrfTokenService {	private Cache cache = null;	@Resource private CacheManager cacheManager;	private Logger logger = LoggerFactory.getLogger(this.getClass());	@PostConstruct	public void postConstruct() {		cache = cacheManager.getCache("objectCache");	}	public String create(String sessionId) {		String csrfToken = UUID.randomUUID().toString();		cache.put(sessionId, csrfToken);		logger.debug("CsrfToken create, sessionId: {}, csrfToken: {}", sessionId, csrfToken);		return csrfToken;	}	public boolean check(String sessionId, String clientToken) {		logger.debug("CsrfToken check, sessionId: {}, clientToken: {}", sessionId, clientToken);		String csrfToken = this.cache.get(sessionId, String.class);		if (StringUtils.isNotEmpty(clientToken) && clientToken.equals(csrfToken)) {			this.cache.evict(sessionId);			return true;		}		return false;	}}